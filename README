Тестовое задание - разработка фермы.

Задание реализованно на двух серверах (php база MYSQL, RoR база PostgreSQL).

Развернутая рабочая версия - http://matmac.net/ferm/
Включена поддержка исходного кода.

В репозитории есть 3 ветки:
flex-client:
- клиентская часть на flex (web app). 
- клиентская часть на flex (air app) файл называется ferm.air. 

php-server:
папка views - представления формирующие XML ответ сервера.
MSQL.php - PDO драйвер базы данных.
startUp.php - файл настроек (БД, кодировки, итп).
остальные 3 - контроллеры на каждое действие(выбрать все поля, добавить поле, удалить поле).

rails-server:
seeds_controller - контроллер с 3мя экшенами на каждый запрос клиетской часть (выбрать все поля, добавить поле, удалить поле).
в views представления на каждый экшен в seeds_controller.

В клиентской части можно переключить с каким сервером будет работать клиент(php или rails).
В теге Declarations нужно раскоменитировать нужную группу HTTPService подключений и закоментировать не нужную.


База данных - ferm
таблица - seedings
поля:
id - int
ObjectName - varchar
x - float
y - float
plantedTime - bigint

Настройка БД на php:
файл MSQL.php
метод dbConfig:
case 'ferm':
	$this->hostName = 'localhost';
	$this->userName = 'andrey';
	$this->password = '1';
	$this->dbName = 'ferm';
	break;
В каждом скрипте при создании подключения к БД черех PDO настраивается конфиг(передачей флага 'ferm').
Для настройки БД нужно перенастроить case "ferm" в файл MSQL.php метод dbConfig.

Все запросы в серверрах передаются через POST.
Ссылка на php сервер: http://matmac.net/ferm
Ссылка на RoR сервер: http://evening-sunset-7307.herokuapp.com


Жизненый цикл программы:
При загрузке клиента отправляем запрос на сервер для загрузки предыдущего состояния игры.
Загружается предыдущее состояние мира(если есть посаженные объекты в базе).
Определяется стадия роста объекта по времени посадки (по ней выбираем картинку объекта).
Добавляется таймер по которому объект будет расти оставшиеся стадии роста(каждый со своим интервалом в зависимости от типа).

При вытаскивании изображения объекта на поле отрисовываем его, добавляем в базу объектов,
добавляем таймер по которому будет расти объект(каждый со своим интервалом в зависимости от типа).
Отправляем запрос на сервер на посадку объекта.

При удаление объекта удаляем его из базы объектов, останавливаем связанные с ним таймеры, 
отправляем запрос на сервер на удаление объекта.

Приложение ориентированно как можно больше на клиентскую часть, что бы сократить колво запросов и их время выполнение на сервере.
Сервер работает как помошник работы с БД.